class <%= @class_name %> < ActiveRecord::Base
<% if @parents != nil %>
<%   @parents.each do |p| %>
  belongs_to :<%= keyword(p) %>
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @polymorphic != nil %>
<%   @polymorphic.each do |p| %>
  belongs_to :<%= keyword(p) %>, polymorphic: true
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @children != nil %>
<%   @children.each do |k, v| %>
  has_many :<%= keyword_plural(k) %>, dependent: :destroy
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @associations != nil %>
<%   @associations.each do |k, v| %>
<%     if v == nil %>
  has_many :<%= keyword_plural(k) %>
<%     elsif v["through"] != nil %>
  has_many :<%= keyword_plural(k) %>, :through => :<%= keyword_plural(v["through"]) %>
<%     elsif v["as"] != nil %>
  has_many :<%= keyword_plural(k) %>, :as => :<%= keyword(v["as"]) %>
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @keys_def != nil %>
<%   @keys_def.each do |k, v| %>
<%     if v["type"] == "integer" and v["range"] != nil %>
  validates :<%= keyword(k) %>, :numericality => {:greater_than_or_equal_to => <%= v["range"][0].to_s %>, :less_than_or_equal_to => <%= v["range"][1].to_s %>}<% if v["default"] == nil %>, allow_nil: true <% end %>
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @attrs_def != nil %>
<%   @attrs_def.each do |k, v| %>
<%     if v["type"] == "integer" and v["range"] != nil %>
  validates :<%= keyword(k) %>, :numericality => {:greater_than_or_equal_to => <%= v["range"][0].to_s %>, :less_than_or_equal_to => <%= v["range"][1].to_s %>}<% if v["default"] == nil %>, allow_nil: true <% end %>
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>

  def get_default(key)
    <%= @class_name %>.get_default(key)
  end

  def self.get_default(key)
    value = nil
<% if @default_def.size > 0 %>

    case key
<%   @default_def.each do |k, v| %>
    when :<%= k %>
      value = <%= v %>
<%   end %>
    end

<% end %>
    value
  end
<% ######################################################################### %>

  def self.find_by_params(params)
<% if @is_association == true %>
<%   if @parents != nil %>
<%     @parents.each do |p| %>
    <%= keyword(p) %> = <%= keyword_camel(p) %>.find_by_params(params)
<%     end %>
<%   end %>
    <%= @model_name %> = nil
    if <%= @parents.map {|p| keyword(p) + " != nil"}.join(" and ") %>
      <%= @model_name %> = <%= find_by_assoc_keys_statement_str(@parents) %>
    end

    <%= @model_name %>
<% else %>
<%   params = Array.new %>
<%   @all_keys.each do |k, v| %>
<%     if v["type"] == "ipv4" %>
    <%= keyword(k) %> = IPAddr.new(params[:<%= keyword(k) %>]).hton
<%       params << keyword(k) %>
<%     else %>
<%       params << "params[:" + keyword(k) + "]" %>
<%     end %>
<%   end %>
<%  func_name_str = @all_keys.keys.map{|k| keyword(k)}.join("_and_") %>
<%  params_str = params.join(", ") %>
    find_by_<%= func_name_str %>(<%= params_str %>)
<% end %>
  end
<% ######################################################################### %>

  def self.get_by_params(params)
<% if @parents != nil %>
<%   @parents.each do |p| %>
    <%= keyword(p) %> = <%= keyword_camel(p) %>.get_by_params(params)
<%   end %>
<% end %>
<% if @is_association == false %>
    <%= @model_name %> = find_by_params(params)
<% elsif @parents != nil %>
    <%= @model_name %> = <%= find_by_assoc_keys_statement_str(@parents) %>
<% end %>
    if <%= @model_name %> == nil
      <%= @model_name %> = <%= @class_name %>.new
<% if @parents != nil %>
<%   @parents.each do |p| %>
      <%= @model_name %>.<%= keyword(p) %>_id = <%= keyword(p) %>.id
<%   end %>
<% end %>
<% if @all_keys != nil and @is_association == false %>
<%   @all_keys.keys.each do |k, v| %>
      <%= @model_name %>.<%= keyword(k) %> = params[:<%= keyword(k) %>]
<%   end %>
<% end %>
      <%= @model_name %>.save!
    end

    <%= @model_name %>
  end

  def update_by_params(params)
<% if @attrs_def != nil %>
<%   @attrs_def.each do |k, v| %>
    if params.has_key?(:<%= keyword(k) %>)
      self.<%= keyword(k) %> = params[:<%= keyword(k) %>]
    end

<%   end %>
<% end %>
    self.save!
  end
<% ######################################################################### %>
<% if @attrs_def != nil %>
<%   @attrs_def.each do |k, v| %>

<%     if v["type"] == "ipv4" or v["type"] == "ipv6" %>
  def <%= keyword(k) %>=(v)
    blob = v.nil? ? <%= @default_def[keyword(k)] %> : IPAddr.new(v).hton
    write_attribute(:<%= keyword(k) %>, blob)
  end

  def <%= keyword(k) %>
    blob = read_attribute(:<%= keyword(k) %>)
    blob.nil? ? nil : IPAddr.new_ntoh(blob).to_s
  end
<%     else %>
  def <%= keyword(k) %>=(v)
    write_attribute(:<%= keyword(k) %>, v.nil? ? get_default(:<%= keyword(k) %>) : v)
  end
<%     end %>
<%   end %>
<% end %>
<% @ipaddr_keys.each do |k, v| %>

  def <%= keyword(k) %>=(v)
    blob = v.nil? ? nil : IPAddr.new(v).hton
    write_attribute(:<%= keyword(k) %>, blob)
  end

  def <%= keyword(k) %>
    blob = read_attribute(:<%= keyword(k) %>)
    blob.nil? ? nil : IPAddr.new_ntoh(blob).to_s
  end
<% end %>
end
