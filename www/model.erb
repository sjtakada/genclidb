class <%= @class_name %> < ActiveRecord::Base
<% if @belongs_to != nil %>
<%   @belongs_to.each do |k, v| %>
<%     if v["type"] == "table" %>
  belongs_to :<%= keyword(k) %>
<%     elsif v["type"] == "interface" %>
  belongs_to :<%= keyword(k) %>, polymorphic: true
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @has_many != nil %>
<%   @has_many.each do |k, v| %>
<%     if v["type"] == "association" %>
<%       if !v["as"].nil? %>
  has_many :<%= keyword_plural(k) %>, :as => :<%= keyword(v["as"]) %>
<%       else %>
  has_many :<%= keyword_plural(k) %>
<%       end %>
<%     else %>
<%       if !v["through"].nil? %>
  has_many :<%= keyword_plural(k) %>, :through => :<%= keyword_plural(v["through"]) %>
<%       else %>
  has_many :<%= keyword_plural(k) %>, dependent: :destroy
<%       end %>
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @has_one != nil %>
<%   @has_one.each do |k, v| %>
  has_one :<%= keyword(k) %>, dependent: :destroy
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @keys_def != nil %>
<%   @keys_def.each do |k, v| %>
<%     if v["type"] == "integer" and v["range"] != nil %>
  validates :<%= keyword(k) %>, :numericality => {:greater_than_or_equal_to => <%= v["range"][0].to_s %>, :less_than_or_equal_to => <%= v["range"][1].to_s %>}<% if v["default"] == nil %>, allow_nil: true <% end %>
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @attrs_def != nil %>
<%   @attrs_def.each do |k, v| %>
<%     if v["type"] == "integer" and v["range"] != nil %>
  validates :<%= keyword(k) %>, :numericality => {:greater_than_or_equal_to => <%= v["range"][0].to_s %>, :less_than_or_equal_to => <%= v["range"][1].to_s %>}<% if v["default"] == nil %>, allow_nil: true <% end %>
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>

  def get_default(key)
    <%= @class_name %>.get_default(key)
  end

  def self.get_default(key)
    value = nil
<% if @default_def.size > 0 %>

    case key
<%   @default_def.each do |k, v| %>
    when :<%= k %>
      value = <%= v %>
<%   end %>
    end

<% end %>
    value
  end
<% ######################################################################### %>

  def self.find_by_params(params)
<% if !@auto_keys.empty? %>
<%   @auto_keys.each do |k, v| %>
    if params[:<%= keyword(k) %>] == <%= @app_name %>::Application::NULL_KEY
      params[:<%= keyword(k) %>] = nil
    end

<%   end %>
<%   cond = @auto_keys.map{|k, v| "params[:" + keyword(k) + "] == nil"}.join(" and ") %>
    if <%= cond %>
      <%= find_by_statement_str_no_auto(@all_keys) %>
    else
      <%= find_by_statement_str(@all_keys) %>
    end
<% else %>
    <%= find_by_statement_str(@all_keys) %>
<% end %>
  end
<% ######################################################################### %>
<% if @all_keys != nil %>
<%   @all_keys.each do |t| %>
<%     k, v = t[0], t[1] %>
<%     if v["type"] == "integer" and !v["auto"].nil? and !@keys_def[k].nil? %>

  def self.set_next_<%= keyword(k) %>(params)
    array = <%= @class_name %>.<%= find_all_statement_str(@all_keys) %>
    if array.size == 0
      max = 0
    else
      max = array.max_by(&:<%= keyword(k) %>).<%= keyword(k) %>
    end

    params[:<%= keyword(k) %>] = (max / <%= v["auto"]["step"] %> + 1) * <%= v["auto"]["step"] %>
  end
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>

  def self.get_by_params(params)
<% if @belongs_to != nil %>
<%   @belongs_to.each do |k, v| %>
<%     if v["type"] == "table" %>
    <%= keyword(k) %> = <%= keyword_camel(k) %>.get_by_params(params)
<%     elsif v["type"] == "interface" %>
    if params["<%= keyword(k) %>"] != nil
      <%= keyword(k) %>_type = params["<%= keyword(k) %>"]
      <%= keyword(k) %>_id = nil

      case <%= keyword(k) %>_type
<%       v["tables"].each do |t| %>
      when "<%= keyword(t) %>"
        <%= keyword(t) %> = <%= keyword_camel(t) %>.get_by_params(params)
        if <%= keyword(t) %> != nil
          <%= keyword(k) %>_id = <%= keyword(t) %>.id
        end
<%       end %>
      end
    end
<%     end %>
<%   end %>
<% end %>
    <%= @model_name %> = find_by_params(params)
    if <%= @model_name %> == nil
      <%= @model_name %> = <%= @class_name %>.new
<% if @belongs_to != nil %>
<%   @belongs_to.each do |k, v| %>
<%     if v["type"] == "table" %>
      <%= @model_name %>.<%= keyword(k) %>_id = <%= keyword(k) %>.id
<%     elsif v["type"] == "interface" %>
      <%= @model_name %>.<%= keyword(k) %>_type = <%= keyword(k) %>_type
      <%= @model_name %>.<%= keyword(k) %>_id = <%= keyword(k) %>_id
<%     end %>
<%   end %>
<% end %>
<% if @all_keys != nil %>
<%   @all_keys.each do |t| %>
<%     k, v = t[0], t[1] %>
<%     if v["type"] == "integer" and !v["auto"].nil? and !@keys_def[k].nil? %>
      set_next_<%= keyword(k) %>(params)
<%     end %>
      <%= @model_name %>.<%= keyword(k) %> = params[:<%= keyword(k) %>]
<%   end %>
<% end %>
      <%= @model_name %>.save!
    end

    <%= @model_name %>
  end

  def update_by_params(params)
<% if @attrs_def != nil %>
<%   @attrs_def.each do |k, v| %>
    if params.has_key?(:<%= keyword(k) %>)
      self.<%= keyword(k) %> = params[:<%= keyword(k) %>]
    end

<%   end %>
<% end %>
    self.save!
  end
<% ######################################################################### %>
<% if @has_many != nil or @has_one != nil %>
<%   cond = Array.new %>
<%   if @has_many != nil %>
<%     @has_many.each do |k, v| %>
<%       cond << keyword_plural(k) + ".empty?" %>
<%     end %>
<%   end %>
<%   if @has_one != nil %>
<%     @has_one.each do |k, v| %>
<%       cond << keyword(k) + ".nil?" %>
<%     end %>
<%   end %>

  def destroy_upon_dependent
    if <%= cond.join(" and ") %>
      destroy
<% if @belongs_to != nil %>
<%   @belongs_to.each do |k, v| %>
<%     if v["destroy-upon"] != nil and v["destroy-upon"] == true %>
      <%= keyword(k) %>.destroy_upon_dependent
<%     end %>
<%   end %>
<% end %>
    end
  end
<% end %>
<% ######################################################################### %>
<% if @belongs_to != nil %>
<%   @belongs_to.each do |k, v| %>
<%     if v["type"] == "interface" %>

  def <%= keyword(k) %>
    value = nil

    case <%= keyword(k) %>_type
<%       v["tables"].each do |t| %>
    when "<%= keyword(t) %>"
      value = <%= keyword_camel(t) %>.find(<%= keyword(k) %>_id)
<%       end %>
    end

    value
  end
<%     end %>
<%   end %>
<% end %>
<% ######################################################################### %>
<% if @attrs_def != nil %>
<%   @attrs_def.each do |k, v| %>
<%     if v["type"] == "ipv4" or v["type"] == "ipv6" %>

  def <%= keyword(k) %>=(v)
    blob = v.nil? ? <%= @default_def[keyword(k)] %> : IPAddr.new(v).hton
    write_attribute(:<%= keyword(k) %>, blob)
  end

  def <%= keyword(k) %>
    blob = read_attribute(:<%= keyword(k) %>)
    blob.nil? ? nil : IPAddr.new_ntoh(blob).to_s
  end
<%     else %>

  def <%= keyword(k) %>=(v)
<%       if rails_attr_null_ok(@attrs_def, k) %>
    write_attribute(:<%= keyword(k) %>, v)
<%       else %>
    write_attribute(:<%= keyword(k) %>, v.nil? ? get_default(:<%= keyword(k) %>) : v)
<%       end %>
  end
<%     end %>
<%   end %>
<% end %>
<% @ipaddr_keys.each do |t| %>
<%  k, v = t[0], t[1] %>

  def <%= keyword(k) %>=(v)
    blob = v.nil? ? nil : IPAddr.new(v).hton
    write_attribute(:<%= keyword(k) %>, blob)
  end

  def <%= keyword(k) %>
    blob = read_attribute(:<%= keyword(k) %>)
    blob.nil? ? nil : IPAddr.new_ntoh(blob).to_s
  end
<% end %>
end
