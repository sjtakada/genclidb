class <%= @class_name %> < ActiveRecord::Base
<% if @parents != nil %>
<%   @parents.each do |p| %>
  belongs_to :<%= keyword(p) %>
<%   end %>
<% end %>

<% if @children != nil %>
<%   @children.each do |k, v| %>
  has_many :<%= keyword_plural(k) %>, dependent: :destroy
<%   end %>
<% end %>

<% if @associations != nil %>
<%   @associations.each do |k, v| %>
<%     if v == nil %>
  has_many :<%= keyword_plural(k) %>
<%     elsif v["through"] != nil %>
  has_many :<%= keyword_plural(k) %>, :through => :<%= keyword_plural(v["through"]) %>
<%     end %>
<%   end %>
<% end %>

<% if @keys_def != nil %>
<%   @keys_def.each do |k, v| %>
<%     if v["type"] == "integer" and v["range"] != nil %>
  validates :<%= keyword(k) %>, :numericality => {:greater_than_or_equal_to => <%= v["range"][0].to_s %>, :less_than_or_equal_to => <%= v["range"][1].to_s %>}<% if v["default"] == nil %>, allow_nil: true <% end %>
<%     end %>
<%   end %>
<% end %>

<% if @attrs_def != nil %>
<%   @attrs_def.each do |k, v| %>
<%     if v["type"] == "integer" and v["range"] != nil %>
  validates :<%= keyword(k) %>, :numericality => {:greater_than_or_equal_to => <%= v["range"][0].to_s %>, :less_than_or_equal_to => <%= v["range"][1].to_s %>}<% if v["default"] == nil %>, allow_nil: true <% end %>
<%     end %>
<%   end %>
<% end %>

  def self.find_by_params(params)
    <%= find_by_keys_statement_str(@all_keys) %>
  end

  def self.get_by_params(params)
<% if @parents != nil %>
<%   @parents.each do |p| %>
    <%= keyword(p) %> = <%= keyword_camel(p) %>.get_by_params(params)
<%   end %>
<% end %>
    <%= @model_name %> = find_by_params(params)
    if <%= @model_name %> == nil
      <%= @model_name %> = <%= @class_name %>.new
<% if @parent_name != nil %>
      <%= @model_name %>.<%= @parent_name %>_id = <%= @parent_name %>.id
<% end %>
<% if @all_keys != nil %>
<%   @all_keys.each do |k, v| %>
      <%= @model_name %>.<%= keyword(k) %> = params[:<%= keyword(k) %>]
<%   end %>
<% end %>
      <%= @model_name %>.save!
    end

    <%= @model_name %>
  end

  def update_by_params(params)
<% if @attrs_def != nil %>
<%   @attrs_def.each do |k, v| %>
    if params[:<%= keyword(k) %>] != nil
      if params[:<%= keyword(k) %>] == "NULL"
        self.<%= keyword(k) %> = nil
      else
        self.<%= keyword(k) %> = params[:<%= keyword(k) %>]
      end
    end

<%   end %>
<% end %>
    self.save!
  end

  def binary_to_ipaddr
<% @ipaddr_keys.each do |k, v| %>
    if self.<%= keyword(k) %> != nil
      self.<%= keyword(k) %> = IPAddr.new_ntoh(self.<%= keyword(k) %>).to_s
    end
<% end %>
  end
end
