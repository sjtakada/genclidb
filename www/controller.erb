class <%= @class_name %>sController < ApplicationController
  before_action :set_<%= @model_name %>, only: [:show, :edit, :update, :destroy]
  skip_before_filter :verify_authenticity_token, :if => Proc.new {|c| c.request.format == 'application/json' }

<% if @polymorphic == nil %>
  # PUT /<%= @api_path %>.json
<% end %>
  def create_by_keys
    @<%= @model_name %> = <%= @class_name %>.get_by_params(params)

    respond_to do |format|
      if @<%= @model_name %> != nil
        format.json { render action: 'show', status: :created, location: @<%= @model_name %>}
      else
        format.json { render json: @<%= @model_name %>.errors, status: :unprocessable_entity }
      end
    end
  end
<% ######################################################################### %>
<% if @polymorphic != nil %>
<%   intf = @polymorphic["interface"] %>
<%   @polymorphic["table"].each do |t| %>

  # PUT /<%= rails_api_path_polymorphic(@belongs_to, t) %>.json
  def create_by_<%= keyword(t) %>
    params["<%= keyword(intf) %>"] = "<%= keyword(t) %>"
    create_by_keys
  end
<%   end %>
<% end %>

<% ######################################################################### %>
<% if @polymorphic == nil %>
  # POST /<%= @api_path %>.json
<% end %>
  def update_by_keys
    @<%= @model_name %> = <%= @class_name %>.get_by_params(params)

    respond_to do |format|
      if @<%= @model_name %>.update_by_params(params)
        format.json { render action: 'show', status: :created, location: @<%= @model_name %>}
      else
        format.json { render json: @<%= @model_name %>.errors, status: :unprocessable_entity }
      end
    end
  end
<% ######################################################################### %>
<% if @polymorphic != nil %>
<%   intf = @polymorphic["interface"] %>
<%   @polymorphic["table"].each do |t| %>

  # PUT /<%= rails_api_path_polymorphic(@belongs_to, t) %>.json
  def update_by_<%= keyword(t) %>
    params["<%= keyword(intf) %>"] = "<%= keyword(t) %>"
    update_by_keys
  end
<%   end %>
<% end %>

<% ######################################################################### %>
<% if @polymorphic == nil %>
  # DELETE /<%= @api_path %>.json
<% end %>
  def destroy_by_keys
    @<%= @model_name %> = <%= @class_name %>.find_by_params(params)
    if @<%= @model_name %> != nil
<% if @is_assoc == true %>
<%   @belongs_to.each do |p| %>
<%     key_id = keyword(p) + "_id" %>
      <%= key_id %> = @<%= @model_name %>.<%= key_id %>
<%   end %>
<%   if @polymorphic != nil and @polymorphic["interface"] != nil %>
<%     intf = keyword(@polymorphic["interface"]) %>
      <%= intf %>_type = @<%= @model_name %>.<%= intf %>_type
      <%= intf %> = @<%= @model_name %>.<%= intf %>
<%   end %>
<% end %>

      @<%= @model_name %>.destroy
<% if @is_assoc == true %>
<%   @belongs_to.each do |p| %>

<%     key_id = keyword(p) + "_id" %>
      if <%= @class_name %>.find_by_<%= key_id %>(<%= key_id %>) == nil
        <%= keyword_camel(p) %>.destroy(<%= key_id %>)
      end
<%   end %>

<%   if @polymorphic != nil and @polymorphic["interface"] != nil %>
<%     intf = keyword(@polymorphic["interface"]) %>
      if <%= @class_name %>.find_by_<%= intf %>_type_and_<%= intf %>_id(<%= intf %>_type, <%= intf %>.id) == nil
        case <%= intf %>_type
<%     @polymorphic["table"].each do |t| %>
        when "<%= keyword(t) %>"
          <%= keyword_camel(t) %>.destroy(<%= intf %>.id)
<%     end %>
        end
      end
<%   end %>
<% end %>
    end

    respond_to do |format|
      format.json { head :no_content }
    end
  end
<% ######################################################################### %>
<% if @polymorphic != nil %>
<%   intf = @polymorphic["interface"] %>
<%   @polymorphic["table"].each do |t| %>

  # PUT /<%= rails_api_path_polymorphic(@belongs_to, t) %>.json
  def destroy_by_<%= keyword(t) %>
    params["<%= keyword(intf) %>"] = "<%= keyword(t) %>"
    destroy_by_keys
  end
<%   end %>
<% end %>

  # GET /<%= @controller_name %>
  # GET /<%= @controller_name %>.json
  def index
<% if @order == nil %>
    @<%= @controller_name %> = <%= @class_name %>.all
<% else %>
    @<%= @controller_name %> = <%= @class_name %>.find(:all, :order => '<%= @order %>')
<% end %>
  end

  # GET /<%= @controller_name %>/1
  # GET /<%= @controller_name %>/1.json
  def show
  end

  # GET /<%= @controller_name %>/new
  def new
    @<%= @model_name %> = <%= @class_name %>.new
  end

  # GET /<%= @controller_name %>/1/edit
  def edit
  end

  # POST /<%= @controller_name %>
  # POST /<%= @controller_name %>.json
  def create
    @<%= @model_name %> = <%= @class_name %>.new(<%= @model_name %>_params)

    respond_to do |format|
      if @<%= @model_name %>.save
        format.html { redirect_to @<%= @model_name %>, notice: '<%= @class_name %> was successfully created.' }
        format.json { render action: 'show', status: :created, location: @<%= @model_name %> }
      else
        format.html { render action: 'new' }
        format.json { render json: @<%= @model_name %>.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /<%= @controller_name %>/1
  # PATCH/PUT /<%= @controller_name %>/1.json
  def update
    respond_to do |format|
      if @<%= @model_name %>.update(<%= @model_name %>_params)
        format.html { redirect_to @<%= @model_name %>, notice: '<%= @class_name %> was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: 'edit' }
        format.json { render json: @<%= @model_name %>.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /<%= @controller_name %>/1
  # DELETE /<%= @controller_name %>/1.json
  def destroy
    @<%= @model_name %>.destroy
    respond_to do |format|
      format.html { redirect_to <%= @controller_name %>_url }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_<%= @model_name %>
      @<%= @model_name %> = <%= @class_name %>.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def <%= @model_name %>_params
      params.require(:<%= @model_name %>).permit(<%= @keys_str %>)
    end
end
